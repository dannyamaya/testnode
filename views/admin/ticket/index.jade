extend ../layout
block header
    link(href="/plugins/summernote/summernote.css" rel="stylesheet")
block content
    .col-xs-10.content
        .panel.panel-default.col-xs-12
            form.form.col-xs-12.col-sm-11.no-padding#searchform(method="post" action="/api/user/#{user._id}/tickets/search")
                .col-xs-4.no-padding
                    .input-group.search
                        input.form-control#search(type="text" name="name" placeholder="Search ticket")
                        span.input-group-addon
                            i.fa.fa-search
                .select.select-livinn.col-xs-2
                    select.form-control#categoryselect
                        option(value="" selected) Category
                        option(value="cleaning services") Cleaning Services
                        option(value="customer service") Customer Service
                        option(value="support") IT Support
                        option(value="maintenance") Maintenance
                        option(value="visits") Visits
                        option(value="others") Others
                .select.select-livinn.col-xs-2
                    select.form-control#subcategoryselect
                        option(value="" selected) Subcategory
                .select.select-livinn.col-xs-2
                    select.form-control#statusselect
                        option(value="" selected) Status
                        option(value="open") Open
                        option(value="pending") Pending
                        option(value="resolved") Resolved
                .select.select-livinn.col-xs-2
                    select.form-control#priorityselect
                        option(value="" selected) Priority
                        option(value="1") 1
                        option(value="2") 2
                        option(value="3") 3
                        option(value="4") 4
            .col-xs-1.no-padding
                button.btn.btn-main.btn-livinn(data-toggle="modal", data-target="#newticketModal", href="/#",data-dismiss="modal")
                    i.fa.fa-plus
            .clearfix(style="margin-bottom:15px;")
            #loader
            .col-xs-12.no-padding.tickets

    .col-xs-2.col-xs-offset-10.no-padding.activity-feed
        .panel.panel-default.col-xs-12.no-padding
            h2 activity feed

    <!-- New Ticket Modal -->
    .modal.fade#newticketModal.ticketModal(tabindex="-1", role="dialog", aria-labelledby="myModalLabel", aria-hidden="true")
        .modal-dialog.modal-lg
            .modal-content
                .pull-right(style="position:absolute; right:15px; top:11px; z-index:2;")
                    button.close(type="button", data-dismiss="modal", aria-hidden="true") &times;
                .modal-header
                    h2.modal-title.text-center Create Ticket
                .modal-body

                    .row
                        form.col-xs-12.col-sm-10.col-sm-offset-1#ticketForm(action="/api/tickets" method="post" enctype="multipart/form-data" role="form")
                            if user.role != 'resident'
                                .form-group
                                    label Filed by
                                    input.form-control#searchinput(type="search")
                                    input.form-control#searchinputHidden(type="hidden" name="filedby")
                                    input.form-control#requestByHidden(type="hidden" name="request_by" value="#{user._id}")
                            .form-group
                                label Category
                                .select
                                    select.form-control(name="category")
                                        option(value="") Please choose a category
                                        option(value="cleaning services") Cleaning Services
                                        option(value="customer service") Customer Service
                                        option(value="support") IT Support
                                        option(value="maintenance") Maintenance
                                        option(value="visits") Visits
                                        option(value="others") Others
                            .form-group
                                label Subject
                                input.form-control#subject(type="text" placeholder="Subject" name="subject")
                            .form-group
                                label Message
                                textarea.form-control#message(type="text" placeholder="Message" name="message" rows="5")

                            .form-group
                                label Attachment
                                input#file-select(type='file' name='attachments' data-classButton="btn btn-primary" data-input="false" data-classIcon="icon-plus" data-buttonText="Escoger Archivo")
                            .modal-footer
                                .pull-right.form-group-end
                                    button.btn(type="button" data-dismiss="modal" style="margin-right:7px;") Cancel
                                    input.btn.btn-livinn(type="submit" value="Submit")

    <!-- Ticket Read Modal -->
    .modal.fade.ticket-modal#readModal(tabindex="-1", role="dialog", aria-labelledby="myModalLabel", aria-hidden="true")
        .modal-dialog.full-width
            .modal-content
                .modal-body
                    .row
                        .col-xs-12.no-padding(style="height:100%;")
                            .col-xs-12.no-padding.ticket-navbar.has-feedback
                                h3.col-xs-12.readModalTitle
                                button.btn(type="button", data-dismiss="modal", aria-hidden="true")
                                    span
                            .col-xs-12.col-sm-3.ticket-left
                                input#hiddenTicket(type="hidden")
                                .form-group
                                    label Requestor
                                    p.form-control-static#ticketrequestor
                                .form-group
                                    label Email
                                    p.form-control-static#ticketemail
                                .form-group
                                    label Phone Number
                                    p.form-control-static#ticketphone
                                .form-group
                                    label(for='filedByRead') Request By
                                    p.form-control-static#ticketrequestby
                                .form-group
                                    label(for="assignee") Assignee
                                    p.form-control-static#ticketasigneeGroup
                                    input.form-control#ticketasignee(type="text")
                                    input.form-control#ticketassigneeHiddenRemove(type="hidden")
                                    input.form-control#ticketasigneeHidden(type="hidden" name="assigned_to")
                            .col-xs-12.col-sm-9.ticket-right
                                .col-xs-12
                                    p.ticketsubject#ticketsubject
                                    p.ticketcategory#ticketcategory
                                    p.ticketdate#ticketdate
                                .col-xs-12
                                    // Nav tabs
                                    ul.col-xs-12.nav.nav-tabs(role='tablist')
                                        li.active(role='presentation')
                                            a(href='#comment', aria-controls='comment', role='tab', data-toggle='tab') Comment
                                        li(role='presentation')
                                            a(href='#note', aria-controls='note', role='tab', data-toggle='tab') Note
                                    // Tab panes
                                    .col-xs-12.no-padding.tab-content
                                        #comment.tab-pane.active(role='tabpanel')
                                            textarea.form-control.message_input(rows="5" placeholder="Type your comment here...")
                                            .bottom_wrapper.clearfix
                                                .send_message.sendMessage(data-current-user="" data-current-user-image="")
                                                    .icon
                                                    .text Send
                                        #note.tab-pane(role='tabpanel')
                                            textarea.form-control#textareaNotes(rows="5" placeholder="Type your notes here...")
                                            .bottom_wrapper.clearfix
                                                .send_message.sendNote(data-current-user="" data-current-user-image="")
                                                    .icon
                                                    .text Send
                                .col-xs-12
                                    // Nav tabs

                                    ul.col-xs-12.nav.nav-tabs.nav-tabs-comments(role='tablist')
                                        li.active(role='presentation')
                                            a(href='#allcomments', aria-controls='allcomments', role='tab', data-toggle='tab')
                                                |   All Comments
                                                span.badge 3
                                        li(role='presentation')
                                            a(href='#allnotes', aria-controls='allnotes', role='tab', data-toggle='tab')
                                                |   Notes
                                                span.badge 0
                                    // Tab panes
                                    .col-xs-12.no-padding.tab-content
                                        #allcomments.tab-pane.active(role='tabpanel')
                                            ul.messages.styleMessage

                                            .message_template
                                                li(class="message" data-id="" data-user="")
                                                    input#hiddenPhoto(type="hidden")
                                                    .ticket-profile-img-2
                                                        img.img-user-conversation(src="" class="img-circle img-responsive")
                                                    .text_wrapper
                                                        .text
                                        #allnotes.tab-pane(role='tabpanel')
                                            ul.notes.styleMessage
                                            .message_template
                                                li(class="message" data-id="" data-user="")
                                                    .ticket-profile-img-2
                                                        img.img-user-conversation(src="" class="img-circle img-responsive")
                                                    .text_wrapper
                                                        .text







block scripts
    script(src="/plugins/summernote/summernote.min.js")
    script(src="/plugins/summernote/lang/summernote-es-ES.js")
    script(src="/js/jquery.bootpag.min.js")
    script.
        //----------------- SOCKET.IO ---------------------------
        var socket = io('/superadmin');

        socket.on('new-ticket', function (dataServer) {

            $('.tickets').prepend("<div class='col-xs-12 no-padding ticket'><div class='col-xs-12 no-padding ticket-up'><div class='ticket-profile-img'><img src='" + dataServer.ticket.filedby.profile_picture + "' class='img-circle img-responsive'></div><div class='ticket-up-info'><div class='col-xs-12 has-feedback'><p class='ticket-subtitle'>" + getCategory(dataServer.ticket.category) + getCategory(dataServer.ticket.subcategory) + " " + moment(dataServer.ticket.created).format('MMMM Do YYYY, h:mm:ss a') + "</p></div><p class='col-xs-12 ticket-title'>" + dataServer.ticket.subject + "</p></div><div class='ticket-btn-group'>" + getStatus(dataServer.ticket.status, dataServer.ticket._id) + "</div></div><div class='col-xs-12 no-padding ticket-down'><div class='col-xs-11'><p>REFERENCE:<strong class='reference'>#" + dataServer.ticket._id + "</strong>CREATED BY:<strong class='created-by text-uppercase'>" + dataServer.ticket.filedby.name.first + " " + dataServer.ticket.filedby.name.last + "</strong>ASSIGNED TO:<strong class='assigned-to'>-</strong></p></div><div class='col-xs-1 no-padding'><button class='pull-right btn-more-ticket' onclick=\'openTicket(\'" + dataServer.ticket._id + "\')\'><i class='fa fa-ellipsis-h'></i></button></div></div></div>");

        });

        $(document).ready(function () {


            $('.note-popover').css({'display': 'none'});

            // pagination script
            $('#page-selection').bootpag({
                total: 10,
                maxVisible: 5,
            }).on("page", function (event, num) {
                filterTickets(num);
            });

            filterTickets(1);


        });

        $('#search').on({
            focus: function () {
                $("#searchform .input-group-addon").addClass('focused');
            },

            blur: function () {
                $("#searchform .input-group-addon").removeClass('focused');
            }
        });

        /* Get params from all filters */
        function filterTickets(page) {
            var search = $('#search').val().trim();
            getTickets(page, search);
        }

        $('#searchForm').submit(function (evt) {
            evt.preventDefault();
            filterTickets(1);
        });

        function getTickets(page, search) {

            $('.tickets').hide();
            $('#loader').fadeIn("slow");

            $.ajax({
                type: "GET",
                url: '/api/users/#{user._id}/tickets?page=' + page + '&search=' + search,
                success: function (data) {

                    console.log(data);
                    var count = data.count;
                    var category = "";

                    for (key = 0; key < data.tickets.length; key++) {
                        $('.tickets').append("<div class='col-xs-12 no-padding ticket'><div class='col-xs-12 no-padding ticket-up'><div class='ticket-profile-img'><img src='" + data.tickets[key].filedby.profile_picture + "' class='img-circle img-responsive'></div><div class='ticket-up-info'><div class='col-xs-12 has-feedback'><p class='ticket-subtitle'>" + getCategory(data.tickets[key].category)+getCategory(data.tickets[key].subcategory) + " " + moment(data.tickets[key].created).format('MMMM Do YYYY, h:mm:ss a') + "</p></div><p class='col-xs-12 ticket-title'>" + data.tickets[key].subject + "</p></div><div class='ticket-btn-group'>" + getStatus(data.tickets[key].status, data.tickets[key]._id) + "</div></div><div class='col-xs-12 no-padding ticket-down'><div class='col-xs-11'><p>REFERENCE:<strong class='reference'>#" + data.tickets[key]._id + "</strong>CREATED BY:<strong class='created-by text-uppercase'>" + data.tickets[key].filedby.name.first + " " + data.tickets[key].filedby.name.last + "</strong>ASSIGNED TO:<strong class='assigned-to'>-</strong></p></div><div class='col-xs-1 no-padding'><button class='pull-right btn-more-ticket' onclick='openTicket(" + "\"" + data.tickets[key]._id + "\"" + ", " + "\"" + data.tickets[key].filedby.profile_picture + "\")'><i class='fa fa-ellipsis-h'></i></button></div></div></div>");
                    }
                }
            }).done(function (data) {
                $('#loader').fadeOut("fast", function () {
                    $('.tickets').removeClass("hidden").fadeIn();
                });
            });
        }

        function getCategory(category) {
            var value = '';
            if( category ){
                if (category == 'cleaning services') {
                    value = "<span class='label label-cleaning'>CLEANING SERVICES</span>";
                } else if (category == 'customer service') {
                    value = "<span class='label label-customer'>CUSTOMER SERVICES</span>";
                } else if (category == 'support') {
                    value = "<span class='label label-it'>IT SUPPORT</span>";
                } else if (category == 'maintenance') {
                    value = "<span class='label label-maintenance'>MAINTENANCE</span>";
                } else if (category == 'visits') {
                    value = "<span class='label label-visits'>VISITS</span>";
                } else if (category == 'others') {
                    value = "<span class='label label-other'>OTHERS</span>";
                } else {
                    value = "<span class='label label-default text-uppercase'>"+category+"</span>";
                }
            }
            return value;
        }

        function getStatus(status, id) {
            var source = "";
            switch (status) {
                case 0:
                    source = '<button type="button" title="Pending" class="btn-exclamation-circle btn-status active" data-id="' + id + '" data-status="0"><i class="fa fa-exclamation-circle"></i></button><button type="button" title="Open" class="btn-clock-o btn-status" data-id="' + id + '" data-status="1"><i class="fa fa-clock-o"></i></button><button type="button" title="Resolved" class="btn-check-circle btn-status" data-id="' + id + '" data-status="2"><i class="fa fa-check-circle"></i></button>';
                    break;
                case 1:
                    source = '<button type="button" title="Pending" class="btn-exclamation-circle btn-status" data-id="' + id + '" data-status="0"><i class="fa fa-exclamation-circle"></i></button><button type="button" title="Open" class="btn-clock-o btn-status active" data-id="' + id + '" data-status="1"><i class="fa fa-clock-o"></i></button><button type="button" title="Resolved" class="btn-check-circle btn-status" data-id="' + id + '" data-status="2"><i class="fa fa-check-circle"></i></button>';
                    break;
                case 2:
                    source = '<button type="button" title="Pending" class="btn-exclamation-circle btn-status" data-id="' + id + '" data-status="0"><i class="fa fa-exclamation-circle"></i></button><button type="button" title="Open" class="btn-clock-o btn-status" data-id="' + id + '" data-status="1"><i class="fa fa-clock-o"></i></button><button type="button" title="Resolved" class="btn-check-circle active btn-status" data-id="' + id + '" data-status="2"><i class="fa fa-check-circle"></i></button>';
                    break;
            }
            ;
            return source;
        }


        /*=== CREATE: Ticket Form ===*/
        $('#ticketForm').submit(function (evt) {

            evt.preventDefault();
            var url = $(this).attr("action");
            var formData = new FormData($('#ticketForm')[0]);

            $.ajax({
                type: "POST",
                url: url,
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    console.log(response);
                    if (response.message == 'Ticket has been created') {
                        socket.emit('new-ticket', {ticket: response.ticket});
                        $('#newticketModal').modal('hide');
                        $('#subject').val("");
                        $('#summernote').summernote("reset");
                        successAlert(response.message);
                    } else {
                        warningAlert('Error al crear la solicitud');
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    if (message == 'password and password confirmation mismatch') {
                        $('#inputConfPasswordr').focus();
                        $('.emailregistrationerror').removeClass('has-error');
                        $('.passwordregistrationerror').addClass('has-error');
                        warningAlert('Las contraseñas no coinciden');
                    } else {
                        warningAlert(message);
                    }
                }
            });
        });

        /*=== READ: Open ticket ===*/

        function openTicket(ticketid,img) {

            $('.messages').empty();
            $("#ticketasigneeGroup").empty();
            $('.send_message').attr('data-current-user','#{user._id}');
            $('.send_message').attr('data-current-user-image','#{user.profile_picture}');
            $('.send_message').attr('data-name','#{user.name.first}  #{user.name.last}');

            $.ajax({
                type: "GET",
                url: 'api/tickets/' + ticketid,
                success: function (response) {

                    console.log(response);
                    $('#hiddenTicket').val(response.ticket._id);
                    $('.readModalTitle').html('Ticket #<span class="text-capitalize">' + response.ticket._id + '</span>');
                    $("#ticketrequestor").html("<span><img class='img-circle user-disp-img' src='"+response.ticket.filedby.profile_picture+"'</span>"+response.ticket.filedby.name.first+" "+response.ticket.filedby.name.last);
                    $("#ticketemail").text(response.ticket.client_id.email);
                    if(response.ticket.client_id.phone.number){
                        $("#ticketphone").text(response.ticket.client_id.phone.number);
                    } else {
                        $("#ticketphone").text("N/A");
                    }
                    $("#ticketrequestby").html("<span><img class='img-circle user-disp-img' src='"+response.ticket.client_id.profile_picture+"'</span>"+response.ticket.client_id.name.first+" "+response.ticket.client_id.name.last);
                    $("#ticketsubject").text(response.ticket.subject);
                    $("#ticketcategory").html(getCategory(response.ticket.category)+getCategory(response.ticket.subcategory));
                    $.each(response.ticket.assignee, function (key, value) {
                        $("#ticketasigneeGroup").append("<span><img class='img-circle user-disp-img' src='" +value.profile_picture +"'</span><span class='label label-default'>" + value.name.first + " "+ value.name.last + "  <a><i data-assignee='"+value._id +"' data-ticket-id='"+response.ticket._id+"' id='assignee"+value._id +"' class='remove glyphicon glyphicon-remove-sign glyphicon-white tag-assigned removeAssignee'></i></a> </span>");
                    });

                    $("#ticketdate").html(moment(response.ticket.created).format('MMMM Do YYYY, h:mm:ss a'));


                    $("#messageRead").text(response.ticket.message);


                    (function () {
                        var Message;
                        Message = function (arg) {
                            this.profile_pic = arg.profile_pic;
                            this.user = arg.user;
                            this.text = arg.text, this.message_side = arg.message_side;
                            this.user = arg.user;
                            this.name = arg.name;
                            this.section = arg.section;
                            this.draw = function (_this) {
                                return function () {
                                    var $message;
                                    $message = $($('.message_template').clone().html());
                                    $message.attr('data-user',_this.user);
                                    $message.attr('data-side',_this.message_side);
                                    $message.attr('data-name',_this.name);
                                    $message.addClass(_this.message_side).find('.text').append('<label class="label-message">'+_this.name +'</label><br>');
                                    $message.addClass(_this.message_side).find('.text').append(_this.text);
                                    $message.find('.img-user-conversation').attr('src',_this.profile_pic);
                                    $('.'+_this.section).append($message);
                                        return $message.addClass('appeared');
                                };
                            }(this);
                            return this;
                        };
                        $(function () {
                            var getMessageText, message_side, sendMessage;
                            getMessageText = function () {
                                var $message_input;
                                $message_input = $('.message_input');
                                return $message_input.val();
                            };
                            sendMessage = function (text, user, side, profile_pic, name, section) {
                                var $messages, message;
                                if (text.trim() === '') {
                                    return;
                                }
                                $('.message_input').val('');
                                $messages = $('.messages');
                                message = new Message({
                                    text: text,
                                    message_side: 'left',
                                    profile_pic: profile_pic,
                                    user:user,
                                    name: name,
                                    section:section
                                });
                                message.draw();
                                return $messages.animate({scrollTop: $messages.prop('scrollHeight')}, 0);
                            };
                            $('.sendMessage').click(function (e) {

                                var parent = $('.messages').children().last().attr('data-user');
                                var prevside = $('.messages').children().last().attr('data-side');
                                var ticket = response.ticket._id;

                                if(parent == $(this).attr('data-current-user'))
                                    var side = prevside;
                                else{
                                    if(prevside == 'left')
                                        var side = 'right';
                                    else
                                        var side = 'left';
                                }


                                $.ajax({
                                    type: "POST",
                                    url: '/api/comments',
                                    data: {
                                        discussion_id: ticket,
                                        posted_by: $(this).attr('data-current-user'),
                                        comment: getMessageText()
                                    },
                                    success: function (response) {

                                    },
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        var message = XMLHttpRequest.responseJSON.message;
                                        warningAlert(message);
                                    }
                                });


                                return sendMessage(getMessageText(),$(this).attr('data-current-user'),side,$(this).attr('data-current-user-image'),$(this).attr('data-name'),'messages');
                            });

                            $('.sendNote').click(function (e) {

                                var parent = $('.messages').children().last().attr('data-user');
                                var ticket = response.ticket._id;


                                $.ajax({
                                    type: "POST",
                                    url: '/api/notes',
                                    data: {
                                        discussion_id: ticket,
                                        posted_by: $(this).attr('data-current-user'),
                                        note: $('#textareaNotes').val()
                                    },
                                    success: function (response) {

                                    },
                                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                                        var message = XMLHttpRequest.responseJSON.message;
                                        warningAlert(message);
                                    }
                                });


                                return sendMessage($('#textareaNotes').val(), $(this).attr('data-current-user'), 'left', $(this).attr('data-current-user-image'), $(this).attr('data-name'),'notes');
                            });


                            //First Messages
                            sendMessage(response.ticket.message, response.ticket.filedby, 'left',img, response.ticket.filedby.name.first + ' ' + response.ticket.filedby.name.last,'messages' );


                            //Another Messages
                            $.ajax({
                                type: "GET",
                                url: '/api/comments/discussion?ticket='+response.ticket._id,
                                success: function (response) {

                                    $.each(response.comment, function (index, value) {

                                        var parent = $('.messages').children().last().attr('data-user');
                                        var prevside = $('.messages').children().last().attr('data-side');

                                        if (parent == value.posted_by._id)
                                            var side = prevside;
                                        else {
                                            if (prevside == 'left')
                                                var side = 'right';
                                            else
                                                var side = 'left';
                                        }
                                        sendMessage(value.comment, value.posted_by._id, side, value.posted_by.profile_picture, value.posted_by.name.first +' '+value.posted_by.name.last,'messages');
                                    });

                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    var message = XMLHttpRequest.responseJSON.message;
                                    warningAlert(message);
                                }
                            });

                            //Load Notes
                            $.ajax({
                                type: "GET",
                                url: '/api/notes/discussion?ticket=' + response.ticket._id,
                                success: function (response) {
                                    console.log(response);
                                    $.each(response.note, function (index, value) {
                                        sendMessage(value.note, value.posted_by._id, 'left', value.posted_by.profile_picture, value.posted_by.name.first + ' ' + value.posted_by.name.last, 'notes');
                                    });
                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    var message = XMLHttpRequest.responseJSON.message;
                                    warningAlert(message);
                                }
                            });


                        });
                    }.call(this));


                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });

            $('#readModal').modal('show');
        }

        $("#searchinput").autocomplete({
            source: function (request, response) {
                $('#searchinput').css("cursor", "wait");
                var url = "/api/users?page=" + 1 + "&search=" + $("#searchinput").val();
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (data) {
                        $('#searchinput').css("cursor", "text");
                        response(data.users);
                    }
                });

            },
            minLength: 1
        }).data("ui-autocomplete")._renderItem = function (ul, item) {
            console.log(item);
            return $("<li class='li-autocomplete' data-id='" + item._id + "' style='margin-bottom:5px;'></li>").append(item.name.first + ' ' + item.name.last).appendTo(ul);
        };

        $("#ticketasignee").autocomplete({
            source: function (request, response) {
                $('#ticketasignee').css("cursor", "wait");
                var url = "/api/users?page=" + 1 + "&search=" + $("#ticketasignee").val()+'&role=resident';
                $.ajax({
                    type: "GET",
                    url: url,
                    success: function (data) {
                        $('#ticketasignee').css("cursor", "text");
                        response(data.users);
                    }
                });

            },
            minLength: 1
        }).data("ui-autocomplete")._renderItem = function (ul, item) {
            console.log(item);
            return $("<li class='li-autocomplete asigneeli' data-id='" + item._id + "' data-pic='" + item.profile_picture + "' data-name='" + item.name.first + " " + item.name.last + "' style='margin-bottom:5px;'></li>").append(item.name.first + ' ' + item.name.last).appendTo(ul);
        };
        /*=== UPDATE: Update ticket ===*/


        /*=== SEARCH: Search ticket ===*/
        $('#searchform').submit(function (event) {

            event.preventDefault();

            $('.tickets').fadeOut("fast", function () {
                $('#loader').fadeIn("fast");
                $('.tickets').html('');
                getTickets(1, $("#search").val());
            });
        });

        $('body').on('click', '.li-autocomplete', function () {
            $('#searchinput').val($(this).text());
            $('#searchinputHidden').val($(this).attr('data-id'));

        });

        $('body').on('click', '.asigneeli', function () {

            $('#ticketasignee').val($(this).text());
            $('#ticketasigneeHidden').val($(this).attr('data-id'));
            $('#ticketasigneeHidden').attr('data-pic',$(this).attr('data-pic'));
            $('#ticketasigneeHidden').attr('data-name',$(this).attr('data-name'));

            $.ajax({

                type: "PUT",
                data: {
                    assignee: $('#ticketasigneeHidden').val()
                },
                url: '/api/tickets/' + $('#hiddenTicket').val(),
                success: function (response) {
                    var pic = $('#ticketasigneeHidden').attr('data-pic');
                    var name = $('#ticketasigneeHidden').attr('data-name');
                    $("#ticketasigneeGroup").append("<span><img class='img-circle user-disp-img' src='"+$('#ticketasigneeHidden').attr('data-pic')+"'</span><span class='label label-default'>"+$('#ticketasigneeHidden').attr('data-name')+"  <a><i data-assignee='" + $('#ticketasigneeHidden').val() + "' data-ticket-id='" + response.ticket._id + "' id='assignee" +$('#ticketasigneeHidden').val() + "' class='remove glyphicon glyphicon-remove-sign glyphicon-white tag-assigned removeAssignee'></i></a> </span>");

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });

        });

        $('body').on('click', '.removeAssignee', function () {

            var ticket = $(this).attr('data-ticket-id');
            var assignee = $(this).attr('data-assignee');
            $('#ticketassigneeHiddenRemove').val($(this).attr('id'));

            $.ajax({

                type: "PUT",
                data: {
                    assignee: assignee,
                    remove: true
                },
                url: '/api/tickets/' + ticket,
                success: function (response) {
                    console.log(response);
                    $('#'+ $('#ticketassigneeHiddenRemove').val()).parent().parent().parent().remove();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });


        });




        //Updates Status
        $('body').on('click', '.btn-status', function () {

            $(this).parent().children('button').each(function () {
                this.classList.remove('active'); // "this" is the current element in the loop
            })

            $.ajax({
                type: "PUT",
                data: {
                    status: $(this).attr('data-status')
                },
                url: '/api/tickets/' + $(this).attr('data-id'),
                success: function (response) {
                    console.log(response);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });

            $(this).addClass('active');


        });











