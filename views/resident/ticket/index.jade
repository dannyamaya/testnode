extend ../layout
block header
    link(href="/plugins/summernote/summernote.css" rel="stylesheet")
block content
    //- MOBILE FORM
    .col-xs-12.no-padding.hidden-md.hidden-lg#searchTicket.userFilters.userFiltersUp.searchTicket
      .col-xs-12.no-padding.clearFilters
        .col-xs-6.btnCloseFiltersMobile
          button.btn.btn-default(onclick='collapseFilters1()')
            span
              i.icon.ion-ios-arrow-up
        .col-xs-6.btnClearFilters
          button.btn.btn-default.cleanRoleSearch.cleanLocationSearch Clear All
      .col-xs-12.no-padding.search-filtersMobile
        form.col-xs-12.navbar-left(action='' method='' type='')
            .input-group.search
                .col-xs-8.no-padding
                    input.form-control#searchmobile(type="text" name="name" placeholder="Search")
                .col-xs-4.no-padding
                    .select
                        select#searchby
                            option(value="created_by" selected="true") Created by
                            option(value="assigned_to") Assigned to
                            option(value="id") Work Order ID
        .col-xs-12
         .select.select-livinn
            select.form-control.filter#categoryselectmobile
                option(value="" selected) Category
                option(value="cleaning services") Cleaning Services
                option(value="customer service") Customer Service
                option(value="support") IT Support
                option(value="maintenance") Maintenance
                option(value="visits") Visits
                option(value="others") Others
        .col-xs-12
          .select.select-livinn.col-xs-2
              select.form-control.filter#statusselectmobile
                  option(value="" selected) Status
                  option(value="0") Open
                  option(value="1") Pending
                  option(value="2") Resolved

    //-DESKTOP!
    .col-xs-12.userTools.has-feedback.ticketTools
        .col-xs-12.col-md-2.heading-title
            h2.col-xs-10.col-md-12.no-padding #{title}
            .pull-right.visible-xs.visible-sm
                button.btn.btn-livinn#Filters(onclick="deployFilters1()" style="padding: 2px 8px; margin-top: -2px;")
                    span
                        i.icon.ion-ios-search-strong(style="font-size:2rem;")
        .col-xs-10.hidden-xs.hidden-sm
            form.form.col-xs-12.col-sm-11.no-padding#searchform(method="post" action="/api/user/#{user._id}/tickets/search")
                    .pull-right
                        .col-xs-6.no-padding
                            .input-group.search
                                .col-xs-4.no-padding
                                    .select
                                        select#searchby
                                            option(value="created_by" selected="true") Created by
                                            option(value="assigned_to") Assigned to
                                            option(value="id") Work Order ID
                                .col-xs-8.no-padding
                                    input.form-control#search(type="text" name="name" placeholder="Search")
                        .select.select-livinn.col-xs-2
                            select.form-control.filter#categoryselect

                        .select.select-livinn.col-xs-2
                            select.form-control.filter#statusselect
                                option(value="" selected) Status
                                option(value="0") Open
                                option(value="1") Pending
                                option(value="2") Resolved
            .col-xs-1.no-padding
                button.btn.btn-main.btn-livinn(data-toggle="modal", data-target="#newticketModal", href="/#",data-dismiss="modal") New
    input#hiddenHelper(value="0"  type="hidden")

    .col-xs-12.content
        .col-xs-12.col-sm-10.col-sm-offset-1.no-padding

            #loader
            .col-xs-12.no-padding.tickets
            .col-xs-12
                .loading#loading(style="display:none; margin: -50px auto 0 auto;")
        button.btn.btn-livinn.hidden-md.hidden-lg.btn-addTicketMobile(data-toggle='modal', data-target="#newticketModal", href="/#", data-dismiss="modal")
          i.icon.ion-plus

     //- Welcome - No Tickets Users
    .col-xs-12.no-padding.containerNoTickets.hidden
      img.img-responsive.fondoNoTickets(src="../img/fondoNoTickets1.jpg")
      .col-xs-10.col-xs-offset-1.col-lg-8.col-lg-offset-2.contentNoTickets
        .col-xs-12.col-sm-8.col-sm-offset-2.col-md-6.col-md-offset-3.col-lg-8.col-lg-offset-4.no-padding
          h2 Welcome!
          p
            span Your Work orders view is empty.
            br
            | If you want to create a Work Order, click on the NEW button.
        .col-xs-12.col-sm-8.col-sm-offset-2.col-md-6.col-md-offset-3.col-lg-4.col-lg-offset-4
          .col-xs-6.col-xs-offset-3.col-sm-4.col-sm-offset-4.no-padding.imgManoBoton
            img.img-responsive(src="../img/manoboton.svg")

    .col-xs-2.col-xs-offset-10.no-padding.activity-feed.hide
        .panel.panel-default.col-xs-12.no-padding
            h2 activity feed
block modals
    <!-- New Work Order Modal -->
    .modal.fade#newticketModal.ticketModal.registrationModal(tabindex="-1", role="dialog", aria-labelledby="myModalLabel", aria-hidden="true")
        .modal-dialog.modal-lg
            .modal-content
                .modal-header.gradienteLivinn
                    button.close(type="button", data-dismiss="modal", aria-hidden="true")
                        i.icon.ion-android-close
                    h3.text-center Create Work Order
                .modal-body
                    .row
                        form.col-xs-12.col-sm-10.col-sm-offset-1.ticket-mobile-create#ticketForm(action="/api/tickets" method="post" enctype="multipart/form-data" role="form" data-parsley-validate="")
                            if user.role != 'resident'
                                .form-group
                                    label
                                        |   Requested by
                                        span  (optional)
                                    input.form-control.tagarea#searchinput(type="search")
                                    input.form-control#searchinputHidden(type="hidden" name="requested_by")
                            input(type="hidden" name="location" value="#{user.location}")
                            .form-group
                                label Category
                                .select
                                    select.form-control#newTicketCategory(name="category" required)
                                        option(value="") Please choose a category

                            .form-group
                                label Subject
                                input.form-control#subject(type="text" placeholder="Subject" name="subject" required)
                            .form-group
                                label Message
                                textarea.form-control.bgray-input#message(type="text" placeholder="Message" name="message" rows="5" required)

                            .col-xs-12.btnsModal

                                input.hidden#file-select(type='file' name='attachments' data-classButton="btn btn-primary" data-input="false" data-classIcon="icon-plus" data-buttonText="Escoger Archivo")
                                a#attachFileCreateTicket.comment-attachment(style="margin-left:-2%;")
                                    i.icon.ion-paperclip(aria-hidden='true')
                                    |   Attach a file
                                button.col-xs-4.col-xs-offset-2.btn.btn-livinn.pull-right.btn-submit-ticket#createTicket(type='submit') SUBMIT

    <!-- Ticket Read Modal -->
    .modal.fade.ticket-modal#readModal(tabindex="-1", role="dialog", aria-labelledby="myModalLabel", aria-hidden="true" )
        .modal-dialog.full-width
            .modal-content
                .modal-body
                    .row
                        .col-xs-12(style="height:100%;")
                            .col-xs-12.no-padding.ticket-navbar.has-feedback.gradienteLivinn
                                h3.col-xs-12.readModalTitle
                                button.btn(type="button", data-dismiss="modal", aria-hidden="true")
                                    span
                            .col-xs-12.ticket-right
                                .col-xs-12.has-feedback
                                     p.ticketrequestby#ticketrequestby
                                     p.ticketsubject#ticketsubject
                                     p.ticketcategory#ticketcategory
                                     p.ticketdate#ticketdate

                                .col-xs-12
                                    // Nav tabs
                                    ul.col-xs-12.nav.nav-tabs.comment-section(role='tablist')
                                        li.active(role='presentation')
                                            a.gray(href='#comment', aria-controls='comment', role='tab', data-toggle='tab') Comment

                                    // Tab panes
                                    .col-xs-12.no-padding.tab-content
                                        form.tab-pane.active#comment(method="post" enctype="multipart/form-data" role='tabpanel')
                                            textarea.form-control.message_input(rows="5" placeholder="Type your comment here...")
                                            .bottom_wrapper.clearfix
                                                .send_message.sendMessage(data-current-user="" data-current-user-image="")
                                                    .icon
                                                    .text Send
                                                input#attachmentFile(type="file" style="display:none" name='attachments')
                                                a#attachFile.comment-attachment.pull-right
                                                    i.icon.ion-paperclip(aria-hidden='true')
                                                    |   Attach a file

                                .col-xs-12.nav-tabs-comments-wrapper
                                    // Nav tabs

                                    ul.col-xs-12.nav.nav-tabs.nav-tabs-comments.comment-section(role='tablist')
                                        li.active(role='presentation')
                                            a.gray(href='#allcomments', aria-controls='allcomments', role='tab', data-toggle='tab')
                                                |   All Comments
                                                span.badge#commentslength -

                                    // Tab panes
                                    .col-xs-12.no-padding.tab-content
                                        #allcomments.tab-pane.active(role='tabpanel')
                                            ul.messages.styleMessage

                                            .message_template
                                                li(class="message" data-id="" data-user="")
                                                    input#hiddenPhoto(type="hidden")
                                                    .ticket-profile-img-2
                                                        img.img-user-conversation(src="" class="img-circle img-responsive")
                                                    .text_wrapper
                                                        .text


block scripts
    script(src="/plugins/summernote/summernote.min.js")
    script(src="/plugins/summernote/lang/summernote-es-ES.js")
    script(src="/js/jquery.bootpag.min.js")
    script(src="/js/parsley.min.js")
    script.

        function deployFilters1() {
          if ($("#searchTicket").hasClass("userFiltersUp")) {
            $("#searchTicket").removeClass("userFiltersUp");
            $("#searchTicket").addClass("userFiltersDown");
          }
        }

        function collapseFilters1() {
          if ($("#searchTicket").hasClass("userFiltersDown")) {
            $("#searchTicket").removeClass("userFiltersDown");
            $("#searchTicket").addClass("userFiltersUp");
          }
        }

        $('#attachFileCreateTicket').click(function () {
            $('#file-select').trigger('click');
        });

        $('#attachFile').click(function () {
            $('#attachmentFile').trigger('click');
        });

        $("#file-select").change(function () {
            var fileName = $(this).val().replace(/C:\\fakepath\\/i, '');
            $("#attachFileCreateTicket").text(fileName);
        });

        var openticketid = '';

        $(document).ready(function () {
            var count = 2;
            $(window).scroll(function(){
                if  (($(window).scrollTop() == $(document).height() - $(window).height())&& $('#loading').length){
                   //console.log('loading on scroll, page: ' + count);
                   filterTickets(count);
                   count++;
                }
            });

            filterTickets(1);
            loadCategories();

            $('#categoryselect option[value="air conditioning"]').attr("selected", "selected");
        });

        //----------------- SOCKET.IO ---------------------------

        var socket = io('/superadmin');
        var attachment = '';

        socket.on('new-ticket', function (dataServer) {

            //- console.log("socket: new-ticket received");
            //- console.log(dataServer);

            if(dataServer.ticket.requested_by._id == "#{user._id}"){

                var today = moment();
                var createddate = '';
                var formatedDate = '';
                var priority = 'four';
                var assignedto = '';
                var opened = '';

                //Date
                createddate = moment(dataServer.ticket.created);
                if (today.isSame(createddate, 'd')) {
                    formatedDate = createddate.format('LT');
                } else {
                    formatedDate = createddate.format('MMM D');
                }

                //Priority
                if(dataServer.ticket.priority == 1){
                    priority = 'one';
                } else if(dataServer.ticket.priority == 2){
                    priority = 'two';
                } else if(dataServer.ticket.priority == 3){
                    priority = 'three';
                } else {
                    priority = 'four';
                }

                //Assigned to
                if(!dataServer.ticket.assigned_to || dataServer.ticket.assigned_to.length==0){
                    assignedto = 'Not assigned';
                } else {
                    assignedto = '';

                    for(i = 0; i < dataServer.ticket.assigned_to.length;i++){
                        if (!data.tickets[key].assigned_to[i] == null) {
                            if(dataServer.ticket.assigned_to[i]){
                                if(i==dataServer.ticket.assigned_to.length-1){
                                    assignedto+=' '+dataServer.ticket.assigned_to[i].name.first+' '+dataServer.ticket.assigned_to[i].name.last+'.';
                                } else {
                                    assignedto+=' '+dataServer.ticket.assigned_to[i].name.first+' '+dataServer.ticket.assigned_to[i].name.last+', ';
                                }
                            }
                        }
                    }
                }

                //Opened
                if(dataServer.ticket.opened_resident){
                    opened='opened';
                } else {
                    opened='';
                }

                $('.tickets').prepend('<div class="col-xs-12 no-padding ticket resident-ticket '+opened+'" data-ticketid="'+dataServer.ticket._id+'"><div class="col-xs-2 col-sm-1 no-padding ticket-profile-img"></div><div class="col-xs-10 col-sm-11 no-padding ticket-up-info"><button onclick="openTicket(\''+ dataServer.ticket._id + "\',\'" + dataServer.ticket.requested_by.profile_picture +'\')" class="col-xs-12 col-md-10 no-padding ticket-title">'+ dataServer.ticket.subject +'</button><p class="col-xs-12 no-padding reference">#'+ dataServer.ticket._id +'</p><div class="col-xs-12 no-padding ticket-subtitle"><div class="col-xs-6 no-padding">'+ getCategory(dataServer.ticket.category) +'</div><div class="col-xs-6 no-padding"><p class="ticket-date">'+formatedDate +'</p></div></div></div><div class="ticket-btn-group hidden-xs hidden-sm">'+ getStatus(dataServer.ticket.status, dataServer.ticket._id) +'</div></div>');
            }

        });

        //----------------- HELPERS ---------------------------

        function getCategory(category) {
            var value = '';
            if( category ){
                if (category == 'cleaning services') {
                    value = "<span class='label label-cleaning'>CLEANING SERVICES</span>";
                } else if (category == 'customer service') {
                    value = "<span class='label label-customer'>CUSTOMER SERVICES</span>";
                } else if (category == 'support') {
                    value = "<span class='label label-it'>IT SUPPORT</span>";
                } else if (category == 'maintenance') {
                    value = "<span class='label label-maintenance'>MAINTENANCE</span>";
                } else if (category == 'visits') {
                    value = "<span class='label label-visits'>VISITS</span>";
                } else if (category == 'others') {
                    value = "<span class='label label-other'>OTHERS</span>";
                } else {
                    value = "<span class='label label-default text-uppercase'>"+category+"</span>";
                }
            }
            return value;
        }

        function getStatus(status, id) {
            var source = "";
            switch (status) {
                case 0:
                    source = '<ul class="list-inline"><li title="Pending" class="btn-exclamation-circle btn-status active" data-id="' + id + '" data-status="0"><i class="fa fa-exclamation-circle"></i></li><li title="Open" class="btn-clock-o btn-status" data-id="' + id + '" data-status="1"><i class="fa fa-clock-o"></i></li><li title="Resolved" class="btn-check-circle btn-status" data-id="' + id + '" data-status="2"><i class="fa fa-check-circle"></i></li></ul>';
                    break;
                case 1:
                    source = '<ul class="list-inline"><li title="Pending" class="btn-exclamation-circle btn-status" data-id="' + id + '" data-status="0"><i class="fa fa-exclamation-circle"></i></li><li title="Open" class="btn-clock-o btn-status active" data-id="' + id + '" data-status="1"><i class="fa fa-clock-o"></i></li><li title="Resolved" class="btn-check-circle btn-status" data-id="' + id + '" data-status="2"><i class="fa fa-check-circle"></i></li></ul>';
                    break;
                case 2:
                    source = '<ul class="list-inline"><li title="Pending" class="btn-exclamation-circle btn-status" data-id="' + id + '" data-status="0"><i class="fa fa-exclamation-circle"></i></li><li title="Open" class="btn-clock-o btn-status" data-id="' + id + '" data-status="1"><i class="fa fa-clock-o"></i></li><li title="Resolved" class="btn-check-circle active btn-status" data-id="' + id + '" data-status="2"><i class="fa fa-check-circle"></i></li></ul>';
                    break;
            }
            ;
            return source;
        }

        //----------------- CREATE ---------------------------

        $('#ticketForm').submit(function (evt) {

            evt.preventDefault();
            var url = $(this).attr("action");
            var formData = new FormData($('#ticketForm')[0]);

            $.ajax({
                type: "POST",
                url: url,
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    $('.containerNoTickets').remove();
                    console.log(response);
                    if (response.message == 'Work Order has been created') {
                        socket.emit('new-ticket', {ticket: response.ticket});
                        $('#newticketModal').modal('hide');
                        $('#subject').val("");
                        $('#summernote').summernote("reset");
                        $('#ticketForm').parsley().reset();
                        document.getElementById('ticketForm').reset();
                        successAlert(response.message);
                    } else {
                        warningAlert('Error creating work order');
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    console.log(XMLHttpRequest);
                    warningAlert(message);

                }
            });
        });

        //----------------- READ ---------------------------
        function getTickets(page, search) {


            if(page =='1') {
                $('.tickets').hide().html("");
                $('#loader').fadeIn("slow");
            }else{
                $('#loading').fadeIn("slow");
            }

            var options = '';

            $("#categoryselect").val() != '' ? options+= '&category='+$("#categoryselect").val():null;
            $("#statusselect").val() != ''? options+= '&status='+$("#statusselect").val():null;

            var searchby = $("#searchby").val();
            var searchtext = $('#search').val().trim();

            if( searchtext != '' ){
                if(searchby == 'created_by'  ){
                    options+= '&created_by='+search;
                } else if(searchby == 'assigned_to'){
                    options+= '&assigned_to='+search;
                } else if(searchby == 'requested_by'){
                    options+= '&requested_by='+search;
                } else {
                    options+= '&id='+search;
                }
            }
            if(options == '&category=null')
                options = '';
            $.ajax({
                type: "GET",
                url: '/api/users/#{user._id}/tickets?page=' + page + options,
                success: function (data) {

                    console.log(data);

                    var count = data.count;
                    var category = "";

                    var today = moment();
                    var createddate = '';
                    var formatedDate = '';
                    var assignedto = '';
                    var opened = '';

                    if(data.tickets.length == 0){
                        $('#loading').remove();
                        $('.containerNoTickets').removeClass('hidden');
                    } else {
                        $('.containerNoTickets').remove();
                    }
                    for (key = 0; key < data.tickets.length; key++) {

                        //Date
                        createddate = moment(data.tickets[key].created);
                        if (today.isSame(createddate, 'd')) {
                            formatedDate = createddate.format('LT');
                        } else {
                            formatedDate = createddate.format('MMM D');
                        }


                        //Assigned to
                        if(!data.tickets[key].assigned_to || data.tickets[key].assigned_to.length==0){
                            assignedto = 'Not assigned';
                        } else {
                            assignedto = '';

                                    for(i = 0; i < data.tickets[key].assigned_to.length;i++){
                                        if (typeof data.tickets[key].assigned_to[i].name.first !== 'undefined') {

                                            if(i==data.tickets[key].assigned_to.length-1){
                                                assignedto+=' '+data.tickets[key].assigned_to[i].name.first+' '+data.tickets[key].assigned_to[i].name.last+'.';
                                             } else {
                                                assignedto+=' '+data.tickets[key].assigned_to[i].name.first+' '+data.tickets[key].assigned_to[i].name.last+', ';
                                    }
                                }
                            }
                        }

                        //Opened
                        if(data.tickets[key].opened_resident){
                            opened='opened';
                        } else {
                            opened='';
                        }

                        var newMessages = '';
                        if (jQuery.inArray("#{user._id}", data.tickets[key].readed_by) === -1) {
                            newMessages = '<i class="label label-livinn label-new-messages">New Messages</i>';
                        }

                        $('.tickets').append('<div class="col-xs-12 no-padding ticket resident-ticket '+opened+'" data-ticketid="'+data.tickets[key]._id+'"><div class="col-xs-2 col-sm-1 no-padding ticket-profile-img"></div><div class="col-xs-10 col-sm-11 no-padding ticket-up-info"><button onclick="openTicket(\''+ data.tickets[key]._id + "\',\'" + data.tickets[key].requested_by.profile_picture +'\')" class="col-xs-12 col-md-10 no-padding ticket-title">'+ data.tickets[key].subject +'</button><p class="col-xs-12 no-padding reference">#'+ data.tickets[key]._id +'</p><div class="col-xs-12 no-padding ticket-subtitle"><div class="col-xs-6 no-padding">'+ getCategory(data.tickets[key].category)+'</div><div class="col-xs-6 no-padding"><p class="ticket-date">'+formatedDate +'</p><p class="ticket-date ticket-newm">' + newMessages + '</p></div></div></div><div class="ticket-btn-group hidden-xs hidden-sm">'+ getStatus(data.tickets[key].status, data.tickets[key]._id) +'</div></div>');

                    };
                }
            }).done(function (data) {
                $('#loader').fadeOut("fast", function () {
                    $('#loading').fadeOut("slow");
                    $('.tickets').removeClass("hidden").fadeIn();
                });
            });
        }

        $('#search').on({
            focus: function () {
                $("#searchform .input-group-addon").addClass('focused');
            },

            blur: function () {
                $("#searchform .input-group-addon").removeClass('focused');
            }
        });

        /* Get params from all filters */
        function filterTickets(page) {
                var search = $('#search').val().trim();
                getTickets(page, search);

        }

        $('#searchForm').submit(function (evt) {
            evt.preventDefault();
            filterTickets(1);
        });

        $('.filter').on('change', function () {
            filterTickets(1);
        });



        /*=== READ: Open ticket ===*/

        function openTicket(ticketid,img) {

            openticketid = ticketid;

            $('.messages').empty();
            $('.notes').empty();
            $("#ticketasigneeGroup").empty();
            $('#attachFile').html('<i class="icon ion-paperclip" aria-hidden="true"></i> Attach a file')
            $('#attachFileCreateTicket').html('<i class="icon ion-paperclip" aria-hidden="true"></i> Attach a file')
            $('.send_message').attr('data-current-user','#{user._id}');
            $('.send_message').attr('data-current-user-image','#{user.profile_picture}');
            $('.send_message').attr('data-name','#{user.name.first}  #{user.name.last}');

            $.ajax({
                type: "GET",
                url: '/api/tickets/' + ticketid,
                success: function (response) {

                    console.log(response);
                    $('#hiddenTicket').val(response.ticket._id);
                    $('.readModalTitle').html('Work Order #' + response.ticket._id );
                    $("#ticketrequestor").html("<span><img class='img-circle user-disp-img' src='"+response.ticket.requested_by.profile_picture+"'</span>"+response.ticket.requested_by.name.first+" "+response.ticket.requested_by.name.last);
                    $("#ticketemail").text(response.ticket.requested_by.email);
                    if(response.ticket.requested_by.phone.number){
                        $("#ticketphone").text(response.ticket.requested_by.phone.number);
                    } else {
                        $("#ticketphone").text("N/A");
                    }
                    $("#openticketcategory").val(response.ticket.category);
                    $("#openticketsubcategory").val(response.ticket.subcategory);
                    $("#openticketpriority").val(response.ticket.priority);
                    $("#ticketrequestby").html("<span class='text'><img class='img-circle user-disp-img' src='"+response.ticket.created_by.profile_picture+"'</span>"+response.ticket.created_by.name.first+" "+response.ticket.created_by.name.last);
                    $("#ticketsubject").text(response.ticket.subject);
                    $("#ticketcategory").html(getCategory(response.ticket.category)+getCategory(response.ticket.subcategory));
                    $('#uno').attr('data-id',response.ticket._id);
                    $('#dos').attr('data-id',response.ticket._id);
                    $('#tres').attr('data-id',response.ticket._id);
                    if(response.ticket.status == 0){
                        $('.classStatus').removeClass('active');
                        $('#uno').addClass('active');
                    }
                        if(response.ticket.status == 1){
                        $('.classStatus').removeClass('active');
                        $('#dos').addClass('active');
                    }
                        if(response.ticket.status == 2){
                        $('.classStatus').removeClass('active');
                        $('#tres').addClass('active');
                    }

                    $.each(response.ticket.assigned_to, function (key, value) {
                        $("#ticketasigneeGroup").append("<span><img class='img-circle user-disp-img' src='" +value.profile_picture +"'</span><span class='label label-default'>" + value.name.first + " "+ value.name.last + "  <a><i data-assignee='"+value._id +"' data-ticket-id='"+response.ticket._id+"' id='assignee"+value._id +"' class='remove glyphicon glyphicon-remove-sign glyphicon-white tag-assigned removeAssignee'></i></a> </span>");
                    });

                    $("#ticketdate").html(moment(response.ticket.created).format('MMMM Do YYYY, h:mm:ss a'));
                    $("#messageRead").text(response.ticket.message);


                    (function () {

                        var Message;
                        Message = function (arg) {
                            this.profile_pic = arg.profile_pic;
                            this.user = arg.user;
                            this.text = arg.text;
                            this.message_side = arg.message_side;
                            this.user = arg.user;
                            this.name = arg.name;
                            this.section = arg.section;
                            this.created = arg.created;
                            this.file = arg.file;
                            this.filename = arg.filename;

                            this.draw = function (_this) {
                                return function () {
                                    var $message;
                                    $message = $($('.message_template').clone().html());
                                    $message.attr('data-user', _this.user);
                                    $message.attr('data-side', _this.message_side);
                                    $message.attr('data-name', _this.name);
                                    $message.addClass(_this.message_side).find('.text').append('<label class="label-message">' + _this.name + '</label><br>');
                                    if (_this.file !== '')
                                        $message.addClass(_this.message_side).find('.text').append('<p class="comment-chat-date">' + _this.created + '</p><p class="comment-chat">' + _this.text + '</p>' + '<p class="comment-attachment"><a href="' + _this.file + '" target="_blank"><i class="fa fa-paperclip" aria-hidden="true"></i> ' + _this.filename + '</a></p>');
                                    else
                                        $message.addClass(_this.message_side).find('.text').append('<p class="comment-chat-date">' + _this.created + '</p><p class="comment-chat">' + _this.text + '</p>');


                                    $message.find('.img-user-conversation').attr('src', _this.profile_pic);
                                    $('.' + _this.section).append($message);
                                    return $message.addClass('appeared');
                                };
                            }(this);
                            return this;
                        };
                        $(function () {
                            var getMessageText, message_side, sendMessage;
                            getMessageText = function () {
                                var $message_input;
                                $message_input = $('.message_input');
                                return $message_input.val();
                            };
                            sendMessage = function (text, user, side, profile_pic, name, section, created, file, filename) {
                                var $messages, message;
                                if (text.trim() === '') {
                                    return;
                                }
                                $('.message_input').val('');
                                $('#textareaNotes').val('');
                                $messages = $('.messages');
                                message = new Message({
                                    text: text,
                                    message_side: 'left',
                                    profile_pic: profile_pic,
                                    user: user,
                                    name: name,
                                    section: section,
                                    created: created,
                                    file: file,
                                    filename: filename
                                });
                                message.draw();
                                return $messages.animate({scrollTop: $messages.prop('scrollHeight')}, 0);
                            };

                            if ($('#hiddenHelper').val() == 0) {
                                $('#hiddenHelper').val(1);

                                $('.sendNote').click(function (e) {
                                    var ticket = response.ticket._id;

                                    $.ajax({
                                        type: "POST",
                                        url: '/api/notes',
                                        data: {
                                            discussion_id: ticket,
                                            posted_by: $(this).attr('data-current-user'),
                                            note: $('#textareaNotes').val()
                                        },
                                        success: function (response) {

                                        },
                                        error: function (XMLHttpRequest, textStatus, errorThrown) {

                                        }
                                    });

                                    return sendMessage($('#textareaNotes').val(), $(this).attr('data-current-user'), 'left', $(this).attr('data-current-user-image'), $(this).attr('data-name'), 'notes',moment(Date.now()).format('YYYY-MM-DD h:mm:ss a'));
                                });

                                $('.sendMessage').click(function (e) {
                                    var ticket = response.ticket._id;
                                    var formData = new FormData($('#comment')[0]);
                                    formData.append('discussion_id', ticket);
                                    formData.append('posted_by', $(this).attr('data-current-user'));
                                    formData.append('comment', getMessageText());

                                    $.ajax({
                                        type: "POST",
                                        url: '/api/comments',
                                        data: formData,
                                        processData: false,
                                        contentType: false,
                                        success: function (response) {
                                            $('#attachFile').html('<i class="icon ion-paperclip" aria-hidden="true"></i> Attach a file');
                                            $('#attachmentFile').val('');
                                            var count = $('#commentslength').text();
                                            $('#commentslength').text(parseFloat(count) + 1);
                                            return sendMessage(getMessageText(), $('.sendMessage').attr('data-current-user'), 'left', $('.sendMessage').attr('data-current-user-image'), $('.sendMessage').attr('data-name'), 'messages', moment(Date.now()).format('YYYY-MM-DD h:mm:ss a'), response.comment.attachments, response.comment.file_name);

                                        },
                                        error: function (XMLHttpRequest, textStatus, errorThrown) {

                                        }
                                    });
                                });

                            }

                            //First Messages
                            sendMessage(response.ticket.message, response.ticket.requested_by, 'left', img, response.ticket.requested_by.name.first + ' ' + response.ticket.requested_by.name.last, 'messages', moment(response.ticket.created).format('YYYY-MM-DD h:mm:ss a'), response.ticket.attachments, response.ticket.file_name);
                            //Another Messages
                            $.ajax({
                                type: "GET",
                                url: '/api/comments/discussion?ticket='+response.ticket._id,
                                success: function (response) {

                                console.log(response);

                                    $("#commentslength").text(response.comment.length+1);
                                    $.each(response.comment, function (index, value) {
                                        var parent = $('.messages').children().last().attr('data-user');
                                        sendMessage(value.comment, value.posted_by._id, 'left', value.posted_by.profile_picture, value.posted_by.name.first +' '+value.posted_by.name.last,'messages',moment(value.created).format('YYYY-MM-DD h:mm:ss a'),value.attachments, value.file_name);
                                    });

                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    var message = XMLHttpRequest.responseJSON.message;
                                    warningAlert(message);
                                }
                            });

                            //Load Notes
                            $.ajax({
                                type: "GET",
                                url: '/api/notes/discussion?ticket=' + response.ticket._id,
                                success: function (response) {
                                    $('.notes').empty();
                                    $("#noteslength").text(response.note.length);
                                    $.each(response.note, function (index, value) {
                                        sendMessage(value.note, value.posted_by._id, 'left', value.posted_by.profile_picture, value.posted_by.name.first + ' ' + value.posted_by.name.last, 'notes',moment(value.created).format('YYYY-MM-DD h:mm:ss a'));
                                    });
                                },
                                error: function (XMLHttpRequest, textStatus, errorThrown) {
                                    var message = XMLHttpRequest.responseJSON.message;
                                    warningAlert(message);
                                }
                            });
                        });
                    }.call(this));


                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });

            $('#readModal').modal('show');

            $.ajax({
               type: "PUT",
               data: {"opened_resident":true},
               url: '/api/tickets/' + ticketid,
               success: function (response) {
                   $('.ticket[data-ticketid="'+ticketid+'"]').addClass('opened');
               },
               error: function (XMLHttpRequest, textStatus, errorThrown) {
                   var message = XMLHttpRequest.responseJSON.message;
                   warningAlert(message);
               }
           });
        }

        /*=== UPDATE: Update ticket ===*/
        $('.editopenticket').on('change', function () {
            updateticket(openticketid);
        });

        function updateticket(ticketid){

            var category = $('#openticketcategory').val();
            var subcategory = $('#openticketsubcategory').val();
            var priority = $('#openticketpriority').val();

            var dataJSON = {
                'category' : category,
                'subcategory' : subcategory,
                'priority' : priority
            };

            $.ajax({

                type: "PUT",
                data: dataJSON,
                url: '/api/tickets/' + ticketid,
                success: function (response) {
                    console.log(response);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });

        }

        /*=== SEARCH: Search ticket ===*/
        $('#searchform').submit(function (event) {

            event.preventDefault();

            $('.tickets').fadeOut("fast", function () {
                $('#loader').fadeIn("fast");
                $('.tickets').html('');
                getTickets(1, $("#search").val());
            });
        });


        $("#attachmentFile").change(function () {
            var fileName = $(this).val().replace(/C:\\fakepath\\/i, '');
            $("#attachFile").text(fileName);
        });

        $('body').on('click', '.li-autocomplete', function () {
            $('#searchinput').val($(this).text());
            $('#searchinputHidden').val($(this).attr('data-id'));

        });

        $('body').on('click', '.asigneeli', function () {

            $('#ticketasignee').val($(this).text());
            $('#ticketasigneeHidden').val($(this).attr('data-id'));
            $('#ticketasigneeHidden').attr('data-pic',$(this).attr('data-pic'));
            $('#ticketasigneeHidden').attr('data-name',$(this).attr('data-name'));

            $.ajax({

                type: "PUT",
                data: {
                    assignee: $('#ticketasigneeHidden').val()
                },
                url: '/api/tickets/' + $('#hiddenTicket').val(),
                success: function (response) {
                    var pic = $('#ticketasigneeHidden').attr('data-pic');
                    var name = $('#ticketasigneeHidden').attr('data-name');
                    $("#ticketasigneeGroup").append("<span><img class='img-circle user-disp-img' src='"+$('#ticketasigneeHidden').attr('data-pic')+"'</span><span class='label label-default'>"+$('#ticketasigneeHidden').attr('data-name')+"  <a><i data-assignee='" + $('#ticketasigneeHidden').val() + "' data-ticket-id='" + response.ticket._id + "' id='assignee" +$('#ticketasigneeHidden').val() + "' class='remove glyphicon glyphicon-remove-sign glyphicon-white tag-assigned removeAssignee'></i></a> </span>");

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });
        });

        $('body').on('click', '.removeAssignee', function () {

            var ticket = $(this).attr('data-ticket-id');
            var assignee = $(this).attr('data-assignee');
            $('#ticketassigneeHiddenRemove').val($(this).attr('id'));

            $.ajax({

                type: "PUT",
                data: {
                    assignee: assignee,
                    remove: true
                },
                url: '/api/tickets/' + ticket,
                success: function (response) {
                    console.log(response);
                    $('#'+ $('#ticketassigneeHiddenRemove').val()).parent().parent().parent().remove();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    var message = XMLHttpRequest.responseJSON.message;
                    warningAlert(message);
                }
            });
        });

        // GET TICKET CATEGORIES AND SUBCATEGORIES
        function loadCategories(){
          var queryopt = '';
          var categories = new Array();
          //- if(category && category != ''){
          //-   queryopt = '?category='+category;
          //- }
          $.ajax({
                type: "GET",
                url: '/api/ticket/categories',
                success: function (data) {
                    categories = data.categories;
                    $('#newTicketCategory').html('');
                    $('#categoryselect').html('');

                    for(var i=0; i < categories.length ; i++){
                      $('#newTicketCategory').prepend($('<option>', {
                        value: categories[i].name,
                        text: categories[i].name
                      }));

                        $('#categoryselect').prepend($('<option>', {
                            value: categories[i].name,
                            text: categories[i].name
                        }));
                    }

                    $('#newTicketCategory').prepend($('<option>', {
                      value: '',
                      text: 'Choose a Category',
                      selected: true
                    }));

                    $('#categoryselect').prepend($('<option>', {
                      value: '',
                      text: 'Choose a Category',
                      selected: true
                    }));
                },
                error: function(xhr){
                  console.log(xhr);
                }

          });
        };
















